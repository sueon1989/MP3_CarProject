<?xml version="1.0" encoding="UTF-8"?>

<!-- 변경 p610 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.0.xsd"> -->
<!-- 변경 끝 -->

	<bean id="customAccessDenied"	class="com.mp3.security.CustomAccessDeniedHandler"></bean>	<!-- 추가 p630 -->
	<!-- <bean id="customLoginSuccess"	class="com.mp3.security.CustomLoginSuccessHandler"></bean> -->	<!-- 추가 p638 -->
	<!-- <bean id="customPasswordEncoder" class="com.mp3.security.CustomNoOpPasswordEncoder"></bean> -->	<!-- p711 주석처리 -->
	<bean id="bcryptPasswordEncoder"	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />	<!-- 추가 p652 -->
	<bean id="customUserDetailsService"	class="com.mp3.security.CustomUserDetailsService"></bean>	<!-- 추가 p667 -->
		
	<!-- 추가 p612 -->
	<!-- 스프링 시큐리티가 동작하기 위한 최소한의 설정 -->
	<security:http>
	<!-- <security:http auto-config="true" use-expressions="true"> -->	<!-- 수정 p625/ 로그인 안 돼서...p678 보고 재수정 -->
		<!-- 추가 p618 -->
		<!-- 특정한 URI에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정 -->
		<!-- <security:intercept-url pattern= "URI 패턴"	access="권한 체크" /> -->
		<!-- <security:intercept-url pattern="/sample/all"		access="permitAll" />
		<security:intercept-url pattern="/sample/member"	access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/sample/admin"		access="hasRole('ROLE_ADMIN')" /> -->	<!-- 추가 p624 -->
		<security:intercept-url pattern="/"					access="permitAll" />
		<security:intercept-url pattern="/member/list"		access="hasRole('ROLE_ADMIN')" />
		<!-- 추가 끝 p618 -->
		
		<!-- 프로젝트 내용 추가 -->
		<!-- <security:intercept-url pattern="/member/register"	access="permitAll" />
		<security:intercept-url pattern="/member/register2"	access="permitAll" /> -->
		<!-- 프로젝트 내용 추가 끝 -->
		
		
		
		<!-- 시큐리티 시작 지점 -->
		<!-- <security:form-login />	 -->							<!-- 추가 p612) 스프링 시큐리티에서 기본 제공되는 로그인 페이지 -->
		<security:form-login login-page="/customLogin" />		<!-- 변경 p631) 커스텀 로그인 페이지 -->
		
		<!-- 변경 p638 -->
		<!-- admin 계정으로 로그인 성공시 sample/admin 페이지로 이동 -->
		<!-- <security:form-login login-page="/customLogin"		
			authentication-success-handler-ref="customLoginSuccess" /> -->	<!-- 변경 p639) 커스텀 로그인 페이지/ 사용자 권한에 따라 다른 페이지 호출 -->
		
		
		<!-- 접근 제한 메시지 처리 -->
		<!-- URI 접근 권한이 없는 경우	ex) member 정보로 로그인한 사용자가 admin에 접근하는 경우 -->
		<!-- <security:access-denied-handler error-page="/accessError" /> -->	<!-- 추가 p625: 방법1) 직접 에러페이지 지정 -->
		<!-- <security:access-denied-handler	ref="customAccessDenied" /> -->	<!-- 변경 p630: 방법2) 직접 AccessDeniedHandler 인터페이스 구현 -->
		
		<!-- 추가 p637 -->
		<!-- CSRF 토큰 비활성화 -->
		<!-- <security:csrf disabled="true"/> -->
		
		<!-- <security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" /> -->
		
		<!-- 추가 p678 -->
		<!-- 자동 로그인 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
		<!-- 추가 p640 -->
		<!-- 로그아웃 처리 후 직접 로직을 처리할 수 있는 핸들러 등록 -->
		<!-- <security:logout logout-url="/customLogout"
			invalidate-session="true" /> -->	
		<security:logout logout-url="/customLogout"
			invalidate-session="true" 
			delete-cookies="remember-me, JSESSION_ID" />	<!-- 변경 p681 로그아웃시 쿠키 삭제 -->
		
	</security:http>
	
	<!-- AuthenticationManager: 인증 매니저 -->
	<security:authentication-manager> 
		
		<!-- 추가 p621 -->
		<!-- member라는 계정 정보를 가진 사용자가 로그인을 할 수 있도록 함 -->
		<!-- 패스워드 앞에 {noop} 문자열 추가: 패스워드의 인코딩 처리없이 사용 -->
		<!-- <security:authentication-provider> -->
			<!-- <security:user-service>
				<security:user name="member"	password="{noop}member"	authorities="ROLE_MEMBER"/> 
				<security:user name="admin"		password="{noop}admin" 	authorities="ROLE_MEMBER, ROLE_ADMIN"/>	
			</security:user-service> --> <!-- 추가 p624 -->
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource" /> --> 	<!-- 추가 p646 -->
			
			<!-- <security:jdbc-user-service 
				data-source-ref="dataSource" users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ? " 
				authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ? " />  -->
			
			<!-- 추가 p657 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="select member_id, member_pass, member_permission from member where member_id = ? " 
				authorities-by-username-query="select member_id, member_auth from member_auth where member_id = ? " /> --> 
			<!-- 추가 끝 p657 -->
		
		<!-- 변경 p667 -->	
		<!-- 커스텀 UserDetailsService -->
		<security:authentication-provider
			user-service-ref="customUserDetailsService"> 
		<!-- 변경 끝 p667 -->	
			
			<!-- 추가 p652 -->
			<!-- 패스워드 암호화 처리 -->
			<!-- <security:password-encoder ref="customPasswordEncoder" />  -->	<!-- 참고 p649 -->
			<security:password-encoder ref="bcryptPasswordEncoder" /> 
			<!-- 추가 끝 p652 -->
		
			
		</security:authentication-provider>
		<!-- 추가 끝 p621 --> 
		
		
	
	</security:authentication-manager>
	<!-- 추가 끝 -->
	
</beans>
