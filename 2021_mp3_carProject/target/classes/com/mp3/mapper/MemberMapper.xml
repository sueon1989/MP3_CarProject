<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 담당자: kim -->
<mapper namespace="com.mp3.mapper.MemberMapper">

	<!-- 추가 p662 -->
	<!-- 회원 조회 (한 행) - read (select) 처리 -->
	<!-- member와 member_auth 테이블을 조인해서 한 번에 처리 -->
	<resultMap type="com.mp3.domain.MemberVO" id="memberMap">
	    <id property="userid" column="userid"/>
	    <result property="member_no"		column="member_no"/>
	    <result property="member_id"		column="member_id"/>
	    <result property="member_pass"		column="member_pass"/>
	    <result property="member_name"		column="member_name"/>
	    <result property="member_gender"	column="member_gender"/>
	    <result property="member_birth"		column="member_birth"/>
	    <result property="member_phone"		column="member_phone"/>
	    <result property="member_address"	column="member_address"/>
	    <result property="member_mail"		column="member_mail"/>
	    <result property="member_mailaccept"	column="member_mailaccept"/>
	    <result property="member_regDate"		column="member_regDate"/>
	    <result property="member_updateDate"	column="member_updateDate"/>
	    <result property="member_permission"	column="member_permission"/>
	    <collection property="authList" 	resultMap="authMap">
	    </collection> 
	</resultMap>
  
	<resultMap type="com.mp3.domain.AuthVO" id="authMap">
	    <result property="member_id"	column="member_id"/>
	    <result property="member_auth"	column="member_auth"/>
	</resultMap>
	
	<select id="read" resultMap="memberMap">
		SELECT 
		  member_no, mem.member_id, member_pass, member_name, member_gender,
		  member_birth, member_phone, member_address, member_mail, member_mailaccept, 
		  member_regDate, member_updateDate, member_permission, member_auth
	  
		FROM 
			member mem LEFT OUTER JOIN member_auth auth on mem.member_id = auth.member_id
		WHERE mem.member_id = #{member_id} 
	</select>


	<!-- 추가 끝 p662 -->
	
	
	
	
	<!-- Oracle 쿼리 -->
    
    <!-- 회원 조회 (한 행) - read (select) 처리 -->
   	<select id="readMember" resultType="com.mp3.domain.MemberVO">
		select * from member where member_no = #{member_no}
  	</select>
  	 	
  	<!-- 회원권한 조회 (한 행) - read (select) 처리 -->
   	<select id="readAuth" resultType="com.mp3.domain.AuthVO">
		select * from member_auth where member_id = #{member_id}
  	</select>
  	 	
  	<!-- 아이디 중복체크 -->
   	<select id="checkId" resultType="int">
		select count(*) from member where member_id = #{member_id}
  	</select>
  	 	
  	<!-- ** 패스워드 체크 -->
   	<!-- <select id="checkPass" resultType="int">
		select count(*) from member where member_id = #{member_id} and member_pass = #{member_pass}
  	</select> -->
	
	<!-- 회원 목록(리스트) -->
  	<select id="getList" resultType="com.mp3.domain.MemberVO">
  	<!-- XML구문이 아니고 쿼리문임을 표시 -->
  	<![CDATA[	
		select * from member where member_no>0
	]]>
  	</select>
  	
  	<!-- 회원 등록1 - insert 처리 -->
  	<insert id="insert">
		INSERT INTO member (member_id, member_pass, member_name, member_gender, 
	  						member_birth, member_phone, member_address, member_mail, member_mailaccept)
		VALUES (#{member_id}, #{member_pass}, #{member_name}, #{member_gender}, 
				#{member_birth}, #{member_phone}, #{member_address}, #{member_mail}, #{member_mailaccept})
  	</insert>
  	
  	<!-- 회원 등록2 - @SelectKey 사용 (자동으로 추가되는 PK 값 확인) -->
  	<insert id="insertSelectKey">
  		<![CDATA[	
  		INSERT INTO member (member_id, member_pass, member_name, member_gender, 
  			member_birth, member_phone, member_address, member_mail, member_mailaccept)
		VALUES (#{member_id}, #{member_pass}, #{member_name}, #{member_gender}, 
			#{member_birth}, #{member_phone}, #{member_address}, #{member_mail}, #{member_mailaccept})
    	]]>
  	</insert>
  	
  	<!-- 회원권한 등록 - insert 처리 -->
  	<insert id="insertAuth">
  		INSERT INTO member_auth (member_id, member_auth) VALUES (#{member_id}, 'ROLE_USER')
  	</insert>
  	
	<!-- 회원정보로 회원 탈퇴 -->
	<delete id="deleteAuth">		
		delete from member_auth where member_id = #{member_id}
	</delete> 
	<delete id="deleteMember">		
		delete from member where member_id = #{member_id}
	</delete>
  	
  	
  	<!-- 회원 수정 - update 처리 -->
  	<!-- <update id="update">
  		update member
  		set member_id = #{member_id}, 
  			member_pass = #{member_pass}, 
  			member_name = #{member_name}, 
  			member_gender = #{member_gender}, 
	    	member_birth = #{member_birth}, 
	    	member_phone = #{member_phone}, 
	    	member_address = #{member_address}, 
	    	member_mail = #{member_mail}, 
	    	member_mailaccept = #{member_mailaccept},
	    	member_updateDate = NOW()
  		where member_no = #{member_no}
  	</update> -->
  	
</mapper>